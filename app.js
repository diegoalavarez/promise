// Funci√≥n para determinar el estado del pedido
const estatusPedido = () => Math.random() < 0.8;

// Funci√≥n para simular la preparaci√≥n de un platillo
const prepararPlatillo = (nombre, tiempo) => {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            if (estatusPedido()) {
                console.log(`${nombre} est√° listo para ser entregado.`);
                resolve(`${nombre} entregado con √©xito.`);
            } else {
                reject(`Error en la preparaci√≥n del ${nombre}.`);
            }
        }, tiempo);
    });
};

// Secuencia: bebida -> pizza -> postre
const simularEntregaOrden = () => {
    console.log("Inicio de la secuencia de entrega...");

    prepararPlatillo("Bebida", 2000)
        .then((mensaje) => {
            console.log(`üì¶ ${mensaje}`);
            return prepararPlatillo("Pizza", 5000);
        })
        .then((mensaje) => {
            console.log(`üì¶ ${mensaje}`);
            return prepararPlatillo("Postre", 3000);
        })
        .then((mensaje) => {
            console.log(`üì¶ ${mensaje}`);
            console.log("‚úÖ ¬°Orden completa ha sido entregada!");
        })
        .catch((error) => {
            console.error(`‚ö†Ô∏è ${error}`);
            console.log("‚ùå La orden no pudo completarse. Por favor, intente nuevamente.");
        })
        .finally(() => {
            console.log("Fin del proceso de pedido.");
        });
};

// Iniciar la simulaci√≥n
simularEntregaOrden();